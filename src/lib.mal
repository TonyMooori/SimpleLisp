(def! first (fn* [xs] (nth xs 0)))
(def! dec (fn* [n] (- n 1)))
(def! inc (fn* [n] (+ n 1)))
(def! list (fn* [& r] r))
(def! not (fn* [c] (if c false true)))
(def! nil? (fn* [n] (= nil n)))
(def! list? (fn* [xs] (= (type-str xs) "list")))
(def! vector? (fn* [xs] (= (type-str xs) "vector")))
(def! bool? (fn* [n] (= (type-str n) "bool")))
(def! empty? (fn* [xs] 
    (if (list? xs)
        (= () xs)
        (if (vector? xs)
            (= [] xs)
            nil))))
(def! or (fn* [a b]
    (if a true (if b true false))))
(def! last (fn* [xs] 
    (let* [
        n (count xs)
        r (nth xs (dec n))
    ] 
    r)))
(def! count (fn* [xs]
    ; TODO: if not list or vertor , assert
    (if (or (list? xs) (vector? xs))
        (if (empty? xs)
            0
            (inc (count (rest xs))))
        0)))
(def! > (fn* [a b] (< b a)))
(def! >= (fn* [a b] (or (> a b) (= a b))))
(def! <= (fn* [a b] (or (< a b) (= a b))))
(def! not= (fn* [a b] (not (= a b))))
(def! zero? (fn* [n] (= n 0)))
(def! mod (fn* [n m]
    (let* [
        a (/ n m)
        b (* a m)
    ] (- n b))))
(def! even? (fn* [n] (= 0 (mod n 2))))
(def! odd? (fn* [n] (= 1 (mod n 2))))
(def! string? (fn* [s] (= (type-str s) "str")))
(def! cons (fn* [x xs] (insert xs 0 x)))
(def! append (fn* [xs x] (insert xs (count xs) x)))
(def! second (fn* [xs] (nth xs 1)))
(def! range (fn* [n]
    (if (>= 0 n)
        ()
        (append (range (dec n)) (dec n)))))
(def! vec-to-list (fn* [xs]
    (if (vector? xs)
        (if (empty? xs)
            ()
            (cons (first xs) (vec-to-list (rest xs))))
        (err "The argument of vec-to-list must be vector"))))
(def! map (fn* [f xs]
    (if (empty? xs)
        ()
        (let* [
            x (first xs)
            xs (rest xs)
        ]
        (cons (f x) (map f xs))))))
(def! prn (fn* [& r]
    (print-string (apply pr-str r))))
(def! println (fn* [& r] 
    (print-string (apply str r) "\r\n")))
(def! atom? (fn* [x]
    (= "atom" (type-str x))))
(def! swap! (fn* [a f & xs]
    (let*[
        ys (cons @a xs)
        y  (apply f ys)
    ]
    (reset! a y))))

(defmacro! or (fn* (& xs) 
    (if (empty? xs) 
        nil 
        (if (= 1 (count xs)) 
            (first xs) 
            `(let* 
                (or_FIXME ~(first xs)) 
                (if or_FIXME or_FIXME (or ~@(rest xs))))))))

(defmacro! cond
  (fn* (& clauses)
    (if (> (count clauses) 0)
      (list 'if (first clauses)
            (if (> (count clauses) 1)
                (nth clauses 1)
                (throw "cond requires an even number of forms"))
            (cons 'cond (rest (rest clauses)))))))

(def! symbol? (fn* [x]
    (= "symbol" (type-str x))))

(def! true? (fn* [x]
        (if (= x true) true false)))

(def! false? (fn* [x]
        (if (= x false) true false)))

(def! keyword? (fn* [x] 
    (= "keyword" (type-str x))))

(def! sequential? (fn* [x]
    (if (list? x) 
        true
        (vector? x))))

(def! map? (fn* [x] 
    (= "dict" (type-str x))))

nil